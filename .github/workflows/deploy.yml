name: Deploy to EC2

on:
  push:
    branches:
      - main  # or master, depending on your default branch
    paths:
      - 'backend/**'
      - '.github/workflows/deploy.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Install git if not installed
          which git || sudo yum install -y git
          
          # Install Python 3.12 and its dependencies
          sudo yum update -y
          sudo yum groupinstall -y "Development Tools"
          sudo yum install -y openssl-devel bzip2-devel libffi-devel xz-devel
          
          # Check if Python 3.12 is already installed
          if ! command -v python3.12 &> /dev/null; then
            echo "Installing Python 3.12..."
            cd /tmp
            wget https://www.python.org/ftp/python/3.12.2/Python-3.12.2.tgz
            tar xzf Python-3.12.2.tgz
            cd Python-3.12.2
            ./configure --enable-optimizations
            sudo make altinstall
            cd ~
          else
            echo "Python 3.12 is already installed"
          fi
          
          # Install Rust only if not already installed
          if ! command -v rustc &> /dev/null; then
            echo "Installing Rust..."
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
            source "$HOME/.cargo/env"
          else
            echo "Rust is already installed"
          fi
          
          # Clean up previous deployment if it exists
          rm -rf ~/legal-ai-app
          
          # Clone the repository
          git clone https://github.com/avalon109/legal-ai-app.git ~/legal-ai-app
          cd ~/legal-ai-app
          
          # Set up or update virtual environment with Python 3.12
          python3.12 -m venv ~/venv || echo "venv already exists"
          source ~/venv/bin/activate
          
          # Upgrade pip
          pip install --upgrade pip
          
          # Install requirements
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          elif [ -f backend/requirements.txt ]; then
            pip install -r backend/requirements.txt
          fi
          
          # Create or update systemd service file
          cat > ~/legal-ai-app.service << 'EOL'
          [Unit]
          Description=Legal AI Application
          After=network.target

          [Service]
          User=ec2-user
          WorkingDirectory=/home/ec2-user/legal-ai-app
          Environment="PATH=/home/ec2-user/venv/bin:/home/ec2-user/.cargo/bin"
          Environment="GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}"
          ExecStart=/home/ec2-user/venv/bin/python /home/ec2-user/legal-ai-app/backend/main.py
          Restart=always
          RestartSec=3
          StandardOutput=append:/var/log/legal-ai-app.log
          StandardError=append:/var/log/legal-ai-app.error.log

          [Install]
          WantedBy=multi-user.target
          EOL
          
          # Move service file to systemd directory and set permissions
          sudo mv ~/legal-ai-app.service /etc/systemd/system/
          sudo chmod 644 /etc/systemd/system/legal-ai-app.service
          
          # Create log files and set permissions
          sudo touch /var/log/legal-ai-app.log /var/log/legal-ai-app.error.log
          sudo chown ec2-user:ec2-user /var/log/legal-ai-app.log /var/log/legal-ai-app.error.log
          
          # Stop the service if it's running
          sudo systemctl stop legal-ai-app.service || true
          
          # Reload systemd, enable and restart service
          sudo systemctl daemon-reload
          sudo systemctl enable legal-ai-app.service
          sudo systemctl restart legal-ai-app.service
          
          # Wait for service to start
          sleep 5
          
          # Check if service is running
          sudo systemctl status legal-ai-app.service
          
          # Show the last few lines of the logs
          echo "=== Application Logs ==="
          sudo tail -n 20 /var/log/legal-ai-app.log
          echo "=== Error Logs ==="
          sudo tail -n 20 /var/log/legal-ai-app.error.log
          
          # Verify the service is actually running
          if ! sudo systemctl is-active --quiet legal-ai-app.service; then
            echo "Service failed to start. Checking logs for errors..."
            sudo journalctl -u legal-ai-app.service -n 50
            exit 1
          fi
          
          # Test the endpoint
          echo "Testing endpoint..."
          curl -s http://localhost:8000/ || echo "Endpoint test failed"
          
          echo "Deployment completed"